---
title: "density_gaza"
author: "Olaf König"
format: html
editor: visual
---

# Objective

-   Density with GHS Data for Gaza strip

-   Density with GHS Geneva and Schaffhausen

-   calculate area approximation of territory which is not militarized nor under displacement order

-   calculate current population density, if the whole population lives in these parts...

-   check the results

------------------------------------------------------------------------

```{r setup}

library(tidyverse)
library(terra)
library(sf)
library(mapview)
```

## Directories path

```{r}

dir_input <- "data_input/data_raw"
dir_proccesed <- "data_input/data_processed"
```

## Import dataset

### Global Human Settlement Layer

```{r}

ghs <- rast("/Users/bajj@mediait.ch/Documents/LEDE_Program/Projets/data/population/GHS_POP_E2025_GLOBE_R2023A_4326_3ss_V1_0/GHS_POP_E2025_GLOBE_R2023A_4326_3ss_V1_0.tif")
```

## Vector geometries

```{r}

sf_swiss <- read_sf("data_input/data_raw/Cantons_G1_20250101_2056.geojson") %>% st_transform(4326)

sf_geneva <- sf_swiss %>%
  filter(KTKZ == "GE") %>% mutate(
    area_m2  = as.numeric(st_area(.)),           # surface en m²
    area_km2 = round(area_m2 / 1e6, 2)           # surface en km², arrondi à 2 décimales
  )

sf_schaffhausen <- sf_swiss %>%
  filter(KTKZ == "SH") %>% mutate(
    area_m2  = as.numeric(st_area(.)),           # surface en m²
    area_km2 = round(area_m2 / 1e6, 2)           # surface en km², arrondi à 2 décimales
  )

uno_gaza_strip <- read_sf(file.path(dir_proccesed, "uno_gaza_strip_level1.gpkg")) %>%
  mutate(
    area_m2  = as.numeric(st_area(.)),           # surface en m²
    area_km2 = round(area_m2 / 1e6, 2)           # surface en km², arrondi à 2 décimales
  )




```

Export geometries

```{r}

# Exporter les géométries
sf_geneva %>% 
  st_write("data_input/data_processed/geneva.geojson", delete_dsn = TRUE)

sf_schaffhausen %>% 
  st_write("data_input/data_processed/schaffhausen.geojson", delete_dsn = TRUE)
```

### Militarized and displacement zone, and zone without restrictions

```{r}

ocha_miliarized_zone <- read_sf("data_input/data_processed/mathias_ocha/militarized_zone.gpkg") %>% 
  mutate(
    area_m2  = as.numeric(st_area(.)),           # surface en m²
    area_km2 = round(area_m2 / 1e6, 2)           # surface en km², arrondi à 2 décimales
  )

ocha_displacement_order <- read_sf("data_input/data_processed/mathias_ocha/displacement_orders.gpkg") %>% 
  mutate(
    area_m2  = as.numeric(st_area(.)),           # surface en m²
    area_km2 = round(area_m2 / 1e6, 2)           # surface en km², arrondi à 2 décimales
  )

uno_gaza_strip_no_restriction <- read_sf("data_input/data_processed/mathias_ocha/gaza_minus_militarized/gaza_minus_merged_cleaned.geojson") %>%
  mutate(
    area_m2  = as.numeric(st_area(.)),           # surface en m²
    area_km2 = round(area_m2 / 1e6, 2)           # surface en km², arrondi à 2 décimales
  )
```

## Crop GHS layer

```{r}

ghs_gaza_strip <- crop(ghs, uno_gaza_strip, mask = TRUE)

ghs_geneva <- crop(ghs, sf_geneva, mask = TRUE)

ghs_schaffhausen <- crop(ghs, sf_schaffhausen, mask = TRUE)

ghs_gaza_no_restriction <- crop(ghs, uno_gaza_strip_no_restriction, 
                                mask = TRUE)

# ghs_gaza_strip %>%
#   terra::writeRaster(file.path(dir_proccesed, "ghs_gaza_strip.tif"))
```

```{r}

ghs_gaza_strip %>%
  terra::writeRaster(file.path(dir_proccesed, "ghs_gaza_strip.tif"))

ghs_geneva %>%
  terra::writeRaster(file.path(dir_proccesed, "ghs_geneva.tif"))

ghs_schaffhausen %>%
  terra::writeRaster(file.path(dir_proccesed, "ghs_schaffhausen.tif"))

ghs_gaza_no_restriction %>%
  terra::writeRaster(file.path(dir_proccesed, "ghs_gaza_no_restriction.tif"))

```

## Population calculation with cropped GHS

```{r}


# Calcul de la somme pour chaque raster
sum_geneva <- global(ghs_geneva, "sum", na.rm = TRUE)
sum_schaffhausen <- global(ghs_schaffhausen, "sum", na.rm = TRUE)
sum_gaza_strip <- global(ghs_gaza_strip, "sum", na.rm = TRUE)
sum_gaza_no_restriction <- global(ghs_gaza_no_restriction, "sum", na.rm = TRUE)

# # Affichage des résultats
# print(sum_geneva)
# print(sum_schaffhausen)
# print(sum_gaza_strip)
# print(sum_gaza_no_restriction)
```

```{r}

# Création d'un dataframe avec les résultats
resultats <- data.frame(
  territoire = c("Geneva", "Schaffhausen", "Gaza Strip", "Gaza No Restriction"),
  somme_ghs = c(
    global(ghs_geneva, "sum", na.rm = TRUE)$sum,
    global(ghs_schaffhausen, "sum", na.rm = TRUE)$sum,
    global(ghs_gaza_strip, "sum", na.rm = TRUE)$sum,
    global(ghs_gaza_no_restriction, "sum", na.rm = TRUE)$sum
  )
)

print(resultats)
```

## Gaza strip no restriction - simulation of 2.1 mio habitants in this area

```{r}

# Source: https://www.ochaopt.org/content/reported-impact-snapshot-gaza-strip-13-august-2025

population_current <- 2100000

population_to_add <- population_current - sum_gaza_no_restriction$sum


# 1. Calculer le nombre de cellules non-NA dans le raster
cellules_valides <- sum(!is.na(values(ghs_gaza_no_restriction)))

# 2. Calculer la population par cellule
pop_par_cellule <- population_to_add / cellules_valides

# 3. Créer le nouveau raster avec répartition uniforme de la population à ajouter
ghs_gaza_no_restriction_pop_added <- ghs_gaza_no_restriction + pop_par_cellule

# Vérification
print(paste("Population totale répartie:", global(ghs_gaza_uniform, "sum", na.rm = TRUE)$sum))
print(paste("Population par cellule:", pop_par_cellule))

# 4. Export de la couche
ghs_gaza_no_restriction_pop_added %>%
  terra::writeRaster(file.path(dir_proccesed, "ghs_gaza_no_restriction_pop_added.tif"))

# -----------------------------------------------------------------------

# 5. Créer la nouvelle couche calculée avec l'emprise au sol de tout le territoire restant
# A. Base avec structure correcte (NA hors territoire, 0 dans le territoire)
ghs_gaza_final <- ghs_gaza_strip
ghs_gaza_final[!is.na(ghs_gaza_final)] <- 0

# B. Forcer l'alignement avec resample
pop_aligned <- resample(ghs_gaza_no_restriction_pop_added, ghs_gaza_final, method = "near")

# C. Remplacer les 0 par la population LÀ OÙ il y en a
ghs_gaza_final[!is.na(pop_aligned)] <- pop_aligned[!is.na(pop_aligned)]

ghs_gaza_pop_added_full_extent <- ghs_gaza_final

# D. Export du résultat
ghs_gaza_pop_added_full_extent %>%
  terra::writeRaster(file.path(dir_proccesed, "ghs_gaza_pop_added_full_extent.tif"))



# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# CES opérations ne sont pas très utiles (pas de différence visuelles)
# # On charge les immeubles
# osm_buildings_unosat_damage <- read_sf(file.path(dir_proccesed,
#                      "osm_buildings_unosat_damage_greenhouses_excluded.gpkg"))
# 
# buildings_final <- osm_buildings_unosat_damage %>%
#   select() %>%                         # Supprime TOUS les attributs (garde que géom)
#   st_transform(32636) %>%              # UTM pour buffer précis
#   st_buffer(dist = 5) %>%              # Buffer 5m
#   st_union() %>%                       # Fusion directe
#   st_transform(4326)                   # Retour WGS84            # Retour WGS84
# 
# 
# 
# # On enlève les immeubles des batiments bufferisés
# # Soustraction rapide
# # Désactiver S2 temporairement
# sf_use_s2(FALSE)
# # Faire la soustraction
# gaza_no_restriction_without_houses <- st_difference(uno_gaza_strip_no_restriction, buildings_final)
# # Réactiver S2 si souhaité
# sf_use_s2(TRUE)
# 
# # On exporte le fichier
# gaza_no_restriction_without_houses %>% 
#   write_sf(file.path(dir_proccesed, "gaza_no_restriction_without_houses.geojson"))
# 
# # On fait le crop 
# ghs_gaza_no_restriction <- crop(ghs, gaza_no_restriction_without_houses, 
#                                 mask = TRUE)
```

```{r}


```
