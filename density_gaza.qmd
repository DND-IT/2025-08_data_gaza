---
title: "density_gaza"
author: "Olaf König"
format: html
editor: visual
---

# Objective

-   Density with GHS Data for Gaza strip

-   Density with GHS Geneva and Schaffhausen

-   calculate area approximation of territory which is not militarized nor under displacement order

-   calculate current population density, if the whole population lives in these parts...

-   simulation if the whole gaza population lives in the no-restriction-zone

-   check the results

------------------------------------------------------------------------

```{r setup}

library(tidyverse)
library(terra)
library(sf)
library(mapview)
```

## Directories path

```{r}

dir_input <- "data_input/data_raw"
dir_proccesed <- "data_input/data_processed"
```

## Import dataset

### Global Human Settlement Layer

```{r}

ghs <- rast("/Users/bajj@mediait.ch/Documents/LEDE_Program/Projets/data/population/GHS_POP_E2025_GLOBE_R2023A_4326_3ss_V1_0/GHS_POP_E2025_GLOBE_R2023A_4326_3ss_V1_0.tif")
```

## Vector geometries

```{r}

sf_swiss <- read_sf("data_input/data_raw/Cantons_G1_20250101_2056.geojson") %>% st_transform(4326)

sf_geneva <- sf_swiss %>%
  filter(KTKZ == "GE") %>% mutate(
    area_m2  = as.numeric(st_area(.)),           # surface en m²
    area_km2 = round(area_m2 / 1e6, 2)           # surface en km², arrondi à 2 décimales
  )

sf_schaffhausen <- sf_swiss %>%
  filter(KTKZ == "SH") %>% mutate(
    area_m2  = as.numeric(st_area(.)),           # surface en m²
    area_km2 = round(area_m2 / 1e6, 2)           # surface en km², arrondi à 2 décimales
  )

uno_gaza_strip <- read_sf(file.path(dir_proccesed, "uno_gaza_strip_level1.gpkg")) %>%
  mutate(
    area_m2  = as.numeric(st_area(.)),           # surface en m²
    area_km2 = round(area_m2 / 1e6, 2)           # surface en km², arrondi à 2 décimales
  )




```

## Export geometries

```{r}

# Exporter les géométries
sf_geneva %>% 
  st_write("data_input/data_processed/geneva.geojson", delete_dsn = TRUE)

sf_schaffhausen %>% 
  st_write("data_input/data_processed/schaffhausen.geojson", delete_dsn = TRUE)
```

### Militarized and displacement zone, and zone without restrictions

```{r}

ocha_miliarized_zone <- read_sf("data_input/data_processed/mathias_ocha/militarized_zone.gpkg") %>% 
  mutate(
    area_m2  = as.numeric(st_area(.)),           # surface en m²
    area_km2 = round(area_m2 / 1e6, 2)           # surface en km², arrondi à 2 décimales
  )

ocha_displacement_order <- read_sf("data_input/data_processed/mathias_ocha/displacement_orders.gpkg") %>% 
  mutate(
    area_m2  = as.numeric(st_area(.)),           # surface en m²
    area_km2 = round(area_m2 / 1e6, 2)           # surface en km², arrondi à 2 décimales
  )

uno_gaza_strip_no_restriction <- read_sf("data_input/data_processed/mathias_ocha/gaza_minus_militarized/gaza_no_restriction_clean.gpkg") %>%
  mutate(
    area_m2  = as.numeric(st_area(.)),           # surface en m²
    area_km2 = round(area_m2 / 1e6, 2)           # surface en km², arrondi à 2 décimales
  ) %>% filter(!st_is_empty(geom))
```

## Crop GHS layer

```{r}

ghs_gaza_strip <- crop(ghs, uno_gaza_strip, mask = TRUE)

ghs_geneva <- crop(ghs, sf_geneva, mask = TRUE)

ghs_schaffhausen <- crop(ghs, sf_schaffhausen, mask = TRUE)

ghs_gaza_no_restriction <- crop(ghs, uno_gaza_strip_no_restriction, 
                                mask = TRUE)

# ghs_gaza_strip %>%
#   terra::writeRaster(file.path(dir_proccesed, "ghs_gaza_strip.tif"))
```

```{r}

ghs_gaza_strip %>%
  terra::writeRaster(file.path(dir_proccesed, "ghs_gaza_strip.tif"))

ghs_geneva %>%
  terra::writeRaster(file.path(dir_proccesed, "ghs_geneva.tif"))

ghs_schaffhausen %>%
  terra::writeRaster(file.path(dir_proccesed, "ghs_schaffhausen.tif"))

ghs_gaza_no_restriction %>%
  terra::writeRaster(file.path(dir_proccesed, "ghs_gaza_no_restriction.tif"), overwrite=TRUE)

```

## Population calculation with cropped GHS

```{r}


# Calcul de la somme pour chaque raster
sum_geneva <- global(ghs_geneva, "sum", na.rm = TRUE)
sum_schaffhausen <- global(ghs_schaffhausen, "sum", na.rm = TRUE)
sum_gaza_strip <- global(ghs_gaza_strip, "sum", na.rm = TRUE)
sum_gaza_no_restriction <- global(ghs_gaza_no_restriction, "sum", na.rm = TRUE)

# # Affichage des résultats
# print(sum_geneva)
# print(sum_schaffhausen)
# print(sum_gaza_strip)
# print(sum_gaza_no_restriction)
```

```{r}

# Création d'un dataframe avec les résultats
resultats <- data.frame(
  territoire = c("Geneva", "Schaffhausen", "Gaza Strip", "Gaza No Restriction"),
  somme_ghs = c(
    global(ghs_geneva, "sum", na.rm = TRUE)$sum,
    global(ghs_schaffhausen, "sum", na.rm = TRUE)$sum,
    global(ghs_gaza_strip, "sum", na.rm = TRUE)$sum,
    global(ghs_gaza_no_restriction, "sum", na.rm = TRUE)$sum
  )
)

print(resultats)
```

## Gaza strip no restriction - simulation of 2.1 mio habitants in this area

```{r}

# Source: https://www.ochaopt.org/content/reported-impact-snapshot-gaza-strip-13-august-2025

population_current <- 2100000

population_to_add <- population_current - sum_gaza_no_restriction$sum


# 1. Calculer le nombre de cellules non-NA dans le raster
cellules_valides <- sum(!is.na(values(ghs_gaza_no_restriction)))

# 2. Calculer la population par cellule
pop_par_cellule <- population_to_add / cellules_valides

# 3. Créer le nouveau raster avec répartition uniforme de la population à ajouter
ghs_gaza_no_restriction_pop_added <- ghs_gaza_no_restriction + pop_par_cellule

# Vérification
print(paste("Population totale répartie:", global(ghs_gaza_uniform, "sum", na.rm = TRUE)$sum))
print(paste("Population par cellule:", pop_par_cellule))

# 4. Export de la couche
ghs_gaza_no_restriction_pop_added %>%
  terra::writeRaster(file.path(dir_proccesed, "ghs_gaza_no_restriction_pop_added.tif"), overwrite=TRUE)

# -----------------------------------------------------------------------

# 5. Créer la nouvelle couche calculée avec l'emprise au sol de tout le territoire restant
# A. Base avec structure correcte (NA hors territoire, 0 dans le territoire)
ghs_gaza_final <- ghs_gaza_strip
ghs_gaza_final[!is.na(ghs_gaza_final)] <- 0

# B. Forcer l'alignement avec resample
pop_aligned <- resample(ghs_gaza_no_restriction_pop_added, ghs_gaza_final, method = "near")

# C. Remplacer les 0 par la population LÀ OÙ il y en a
ghs_gaza_final[!is.na(pop_aligned)] <- pop_aligned[!is.na(pop_aligned)]

ghs_gaza_pop_added_full_extent <- ghs_gaza_final

# D. Export du résultat
ghs_gaza_pop_added_full_extent %>%
  terra::writeRaster(file.path(dir_proccesed, "ghs_gaza_pop_added_full_extent.tif"),overwrite=TRUE)



# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
# CES opérations ne sont pas très utiles (pas de différence visuelles)
# # On charge les immeubles
# osm_buildings_unosat_damage <- read_sf(file.path(dir_proccesed,
#                      "osm_buildings_unosat_damage_greenhouses_excluded.gpkg"))
# 
# buildings_final <- osm_buildings_unosat_damage %>%
#   select() %>%                         # Supprime TOUS les attributs (garde que géom)
#   st_transform(32636) %>%              # UTM pour buffer précis
#   st_buffer(dist = 5) %>%              # Buffer 5m
#   st_union() %>%                       # Fusion directe
#   st_transform(4326)                   # Retour WGS84            # Retour WGS84
# 
# 
# 
# # On enlève les immeubles des batiments bufferisés
# # Soustraction rapide
# # Désactiver S2 temporairement
# sf_use_s2(FALSE)
# # Faire la soustraction
# gaza_no_restriction_without_houses <- st_difference(uno_gaza_strip_no_restriction, buildings_final)
# # Réactiver S2 si souhaité
# sf_use_s2(TRUE)
# 
# # On exporte le fichier
# gaza_no_restriction_without_houses %>% 
#   write_sf(file.path(dir_proccesed, "gaza_no_restriction_without_houses.geojson"))
# 
# # On fait le crop 
# ghs_gaza_no_restriction <- crop(ghs, gaza_no_restriction_without_houses, 
#                                 mask = TRUE)
```

## 2d visualisation

```{r}

library(sf)
library(ggplot2)
library(dplyr)
library(units)


# Fonction pour calculer les dimensions d'un territoire
get_territory_dims <- function(sf_obj, name) {
  bbox <- st_bbox(sf_obj)
  width <- bbox["xmax"] - bbox["xmin"]
  height <- bbox["ymax"] - bbox["ymin"]
  
  # Conversion approximative en km (à l'équateur, 1° ≈ 111 km)
  width_km <- width * 111 * cos(mean(c(bbox["ymin"], bbox["ymax"])) * pi/180)
  height_km <- height * 111
  
  list(
    name = name,
    width_deg = width,
    height_deg = height,
    width_km = width_km,
    height_km = height_km,
    bbox = bbox
  )
}

# Calculer les dimensions
geneva_dims <- get_territory_dims(sf_geneva, "Genève")
gaza_dims <- get_territory_dims(uno_gaza_strip_no_restriction, "Gaza")

# Afficher les dimensions
cat("Genève:", round(geneva_dims$width_km, 1), "×", round(geneva_dims$height_km, 1), "km\n")
cat("Gaza:", round(gaza_dims$width_km, 1), "×", round(gaza_dims$height_km, 1), "km\n")
```

```{r}

# Fonction pour créer une carte standardisée
create_standardized_map <- function(sf_obj, title, scale_factor = 1) {
  
  # Calculer le centroïde pour le positionnement
  centroid <- st_centroid(st_union(sf_obj))
  coords <- st_coordinates(centroid)
  
  # Bbox étendue basée sur l'échelle
  bbox <- st_bbox(sf_obj)
  width <- bbox["xmax"] - bbox["xmin"]
  height <- bbox["ymax"] - bbox["ymin"]
  
  # Étendre la bbox selon le facteur d'échelle
  margin_x <- width * (scale_factor - 1) / 2
  margin_y <- height * (scale_factor - 1) / 2
  
  xlim <- c(bbox["xmin"] - margin_x, bbox["xmax"] + margin_x)
  ylim <- c(bbox["ymin"] - margin_y, bbox["ymax"] + margin_y)
  
  ggplot(sf_obj) +
    geom_sf(fill = "lightblue", color = "darkblue", size = 0.5) +
    coord_sf(xlim = xlim, ylim = ylim, expand = FALSE) +
    labs(title = title) +
    theme_void() +
    theme(
      plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
      panel.border = element_rect(color = "black", fill = NA, size = 0.5)
    )
}
```

```{r}

# Déterminer l'échelle commune basée sur le plus grand territoire
max_width_km <- max(geneva_dims$width_km, gaza_dims$width_km)
max_height_km <- max(geneva_dims$height_km, gaza_dims$height_km)

# Facteur d'échelle pour uniformiser (avec marge)
scale_buffer <- 1.1  # 10% de marge

# Créer les cartes
map_geneva <- create_standardized_map(
  sf_geneva, 
  "Canton de Genève",
  scale_factor = scale_buffer
)

map_gaza <- create_standardized_map(
  uno_gaza_strip_no_restriction, 
  "Bande de Gaza",
  scale_factor = scale_buffer
)

# Affichage côte à côte
library(patchwork)
combined_map <- map_geneva + map_gaza +
  plot_annotation(
    title = "Comparaison territoriale : Genève vs Gaza",
    subtitle = paste0("Échelle commune - Largeur max: ", 
                     round(max_width_km, 1), " km")
  )

print(combined_map)
```

```{r}

# Export SVG avec paramètres optimisés
ggsave(
  "geneva_gaza_comparison.svg",
  plot = combined_map,
  width = 12,
  height = 6,
  units = "in",
  dpi = 300,
  device = "svg"
)

# Export individuel si nécessaire
ggsave("geneva_map.svg", map_geneva, width = 6, height = 6, device = "svg")
ggsave("gaza_map.svg", map_gaza, width = 6, height = 6, device = "svg")
```

```{r}

library(ggspatial)

# Version avec échelle et nord
create_journalistic_map <- function(sf_obj, title) {
  ggplot(sf_obj) +
    geom_sf(fill = "lightblue", color = "darkblue", size = 0.5) +
    annotation_scale(location = "br", width_hint = 0.3) +
    annotation_north_arrow(
      location = "tr", 
      which_north = "true",
      style = north_arrow_fancy_orienteering
    ) +
    labs(title = title) +
    theme_void() +
    theme(
      plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
      panel.border = element_rect(color = "black", fill = NA, size = 0.5)
    )
}

create_journalistic_map(sf_geneva, "Canton de Genève")
```
